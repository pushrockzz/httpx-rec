name: Parallel PureDNS Split & Resolve

on:
  workflow_dispatch:

permissions:
  contents: write

env:
  LINES_PER_CHUNK: 51000  # Number of lines per chunk

jobs:
  prepare_matrix:
    name: Prepare chunk matrix
    runs-on: ubuntu-latest
    container:
      # IMPORTANT: Ensure this container image has: bash, find, xargs, split (GNU version preferred for --numeric-suffixes), jq
      image: ghcr.io/pcoder7/spider-puredns-actions:latest
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GHCR_TOKEN }}
    outputs:
      matrix: ${{ steps.set_matrix_output.outputs.matrix }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        # with:
          # fetch-depth: 0 # Usually not needed unless 'find' relies on full git history, which is rare.

      - name: DEBUG - Verify Tools and Initial File System State
        shell: bash
        run: |
          echo "DEBUG: Current directory: $(pwd)"
          echo "DEBUG: Listing all files in repository root and subdirectories:"
          find . -print
          echo "-----------------------------------------------------"
          echo "DEBUG: Specifically looking for majestic_million.txt  files:"
          wget https://raw.githubusercontent.com/hadriansecurity/sanicdns/main/majestic_million.txt
          find . -type f -name 'majestic_million.txt ' -print || echo "DEBUG: 'find' for majestic_million.txt  failed or found nothing."
          echo "-----------------------------------------------------"
          echo "DEBUG: Checking for 'jq' command..."
          if ! command -v jq &> /dev/null; then
            echo "CRITICAL_ERROR: 'jq' command not found. This is essential. Aborting."
            exit 1
          else
            echo "DEBUG: jq version: $(jq --version)"
          fi
          echo "-----------------------------------------------------"
          echo "DEBUG: Checking for 'split' command..."
          if ! command -v split &> /dev/null; then
            echo "CRITICAL_ERROR: 'split' command not found. This is essential. Aborting."
            exit 1
          else
            echo "DEBUG: split version information (if available):"
            split --version || echo "DEBUG: Could not get split version."
          fi
          echo "-----------------------------------------------------"
      - name: Split into chunks & build matrix file
        id: build_matrix_file
        shell: bash
        run: |
          # Uncomment for extreme debugging:
          # set -x 
          
          JSON_MATRIX='[]'
          echo "INFO: Initializing matrix as: $JSON_MATRIX"
          
          echo "INFO: Locating majestic_million.txt  files..."
          
          # Using a temporary file for 'find' results for robustness with special filenames
          # find . -type f -name "majestic_million.txt " -print0 > found_files.tmp
           
          # cat majestic_million.txt > found_files.tmp
          find . -type f -name "majestic_million.txt" -print0 > found_files.tmp
          
          files=()
          while IFS= read -r -d $'\0' file_path_from_find; do
            # Ensure the file path is relative to the current directory for consistency
            # This also handles if find returns './path/to/file'
            standardized_file_path=$(echo "$file_path_from_find" | sed 's|^\./||')
            files+=("$standardized_file_path")
          done < found_files.tmp
          rm found_files.tmp
          if [ "${#files[@]}" -eq 0 ]; then
            # echo "WARNING: No 'majestic_million.txt ' files found using 'find . -type f -name \"majestic_million.txt \"'."
            
             echo "WARNING: No 'majestic_million.txt' files found using 'find . -type f -name \"majestic_million.txt\"'."
            echo "INFO: Matrix will remain '[]'."
          else
            echo "INFO: Found ${#files[@]} 'majestic_million.txt ' file(s):"
            printf "  => '%s'\n" "${files[@]}"
            for file_path in "${files[@]}"; do
              echo "-----------------------------------------------------"
              echo "INFO: Processing file: '$file_path'"
              
              domain_dir=$(dirname "$file_path")
              # If file is in root, dirname is '.', use a default or filename
              if [ "$domain_dir" == "." ]; then
                domain=$(basename "$file_path" .txt) # e.g. subdomains if file is majestic_million.txt  in root
              else
                domain=$(basename "$domain_dir")
              fi
              echo "INFO: Deduced domain: '$domain'"
              if [ ! -f "$file_path" ]; then
                echo "ERROR: File '$file_path' reported by find, but not found during iteration. Skipping."
                continue
              fi
              if [ ! -s "$file_path" ]; then # Check if file exists AND is not empty
                echo "WARNING: File '$file_path' is empty. Skipping splitting for this file."
                continue
              fi
              echo "INFO: Content preview of '$file_path' (first 3 lines):"
              head -n 3 "$file_path"
              echo "-------------------"
              mkdir -p "chunks/$domain"
              output_chunk_prefix="chunks/$domain/chunk_"
              echo "INFO: Splitting '$file_path' into chunks in 'chunks/$domain/' with prefix '$output_chunk_prefix' (max $LINES_PER_CHUNK lines/chunk)"
              
              split -l "$LINES_PER_CHUNK" -a 3 --numeric-suffixes=1 "$file_path" "$output_chunk_prefix"
              split_exit_code=$?
              if [ $split_exit_code -ne 0 ]; then
                echo "ERROR: 'split' command failed with exit code $split_exit_code for file '$file_path'. Skipping chunks for this file."
                continue 
              fi
              
              # Use a subshell for nullglob to keep its scope local
              CHUNK_FILES_FOUND_FOR_DOMAIN=0
              while IFS= read -r chunk_file; do
                if [ -z "$chunk_file" ]; then continue; fi # Skip empty lines if any
                CHUNK_FILES_FOUND_FOR_DOMAIN=$((CHUNK_FILES_FOUND_FOR_DOMAIN + 1))
                echo "DEBUG: Found chunk: '$chunk_file' for domain '$domain'"
                
                # Ensure jq appends correctly
                TEMP_JSON_MATRIX=$(printf '%s' "$JSON_MATRIX" | jq -c --arg d "$domain" --arg c "$chunk_file" '. + [{domain:$d,chunk:$c}]')
                jq_exit_code=$?
                if [ $jq_exit_code -ne 0 ]; then
                  echo "ERROR: jq command failed (exit code $jq_exit_code) when trying to add chunk '$chunk_file'."
                  echo "ERROR: Current JSON_MATRIX was: $JSON_MATRIX"
                  echo "ERROR: Arguments to jq were: domain='$domain', chunk='$chunk_file'"
                  # Decide: skip this chunk or abort? For now, skipping.
                elif [ -z "$TEMP_JSON_MATRIX" ]; then
                  echo "ERROR: jq command produced empty output for chunk '$chunk_file'. This should not happen with '. + [...]'."
                  echo "ERROR: Current JSON_MATRIX was: $JSON_MATRIX"
                else
                  JSON_MATRIX="$TEMP_JSON_MATRIX"
                  # echo "DEBUG: JSON_MATRIX updated to (first 100 chars): $(echo "$JSON_MATRIX" | head -c 100)"
                fi
              done < <(find "chunks/$domain/" -name 'chunk_*' -type f -print) # More robust way to list chunks
              if [ "$CHUNK_FILES_FOUND_FOR_DOMAIN" -eq 0 ]; then
                echo "WARNING: No chunk files (e.g., chunk_001) found in 'chunks/$domain/' after splitting '$file_path'. Original file might be smaller than $LINES_PER_CHUNK lines or 'split' created no files."
              else
                echo "INFO: Processed $CHUNK_FILES_FOUND_FOR_DOMAIN chunk(s) for domain '$domain'."
              fi
            done
          fi
          echo "-----------------------------------------------------"
          echo "FINAL_BUILD_INFO: Final JSON_MATRIX state before writing to file (first 200 chars): $(echo "$JSON_MATRIX" | head -c 200)"
          echo "FINAL_BUILD_INFO: Length of JSON_MATRIX: ${#JSON_MATRIX}"
          echo "INFO: Writing matrix to matrix.json"
          echo "$JSON_MATRIX" > matrix.json
          
          # Immediate verification of matrix.json
          if [ ! -f matrix.json ]; then
            echo "CRITICAL_ERROR: matrix.json was NOT created!"
            echo "INFO: Forcing matrix.json to be '[]' as a fallback."
            echo "[]" > matrix.json
          elif [ ! -s matrix.json ]; then
            echo "CRITICAL_ERROR: matrix.json IS EMPTY after writing JSON_MATRIX which was: $JSON_MATRIX"
            echo "INFO: Forcing matrix.json to be '[]' as a fallback."
            echo "[]" > matrix.json
          else
            echo "VERIFY: matrix.json created. Size: $(wc -c < matrix.json) bytes. Content (first 200 chars): $(head -c 200 matrix.json)"
          fi
          # set +x # if set -x was uncommented
          
      - name: Set matrix output
        id: set_matrix_output
        shell: bash
        run: |
          # set -x # Uncomment for debugging this specific step
          echo "INFO: Starting 'Set matrix output' step."
          OUTPUT_VALUE_FOR_GITHUB="[]" # Default to a valid empty JSON array string
          if [ -f matrix.json ]; then
            echo "INFO: matrix.json found."
            if [ -s matrix.json ]; then # File exists and is not empty
              echo "INFO: matrix.json is not empty. Validating and compacting with jq..."
              # Ensure the content is valid JSON and compact it.
              # head -c 1M matrix.json: Safety measure for very large matrix.json, though unlikely here.
              CANDIDATE_MATRIX_CONTENT=$(jq -c . < matrix.json) 
              JQ_EXIT_CODE=$?
              if [ $JQ_EXIT_CODE -eq 0 ] && [ -n "$CANDIDATE_MATRIX_CONTENT" ]; then
                # Check for newlines again, jq -c should prevent this for valid JSON.
                if [[ "$CANDIDATE_MATRIX_CONTENT" == *$'\n'* ]]; then
                  echo "CRITICAL_ERROR: Compacted matrix content from jq STILL contains newlines. This is unexpected and will break GITHUB_OUTPUT."
                  echo "DUMP: CANDIDATE_MATRIX_CONTENT was:"
                  echo "$CANDIDATE_MATRIX_CONTENT"
                  echo "ERROR: Defaulting output to '[]' due to newline issue."
                  # OUTPUT_VALUE_FOR_GITHUB remains "[]"
                else
                  echo "INFO: jq validation/compaction successful. Setting this as the output value."
                  OUTPUT_VALUE_FOR_GITHUB="$CANDIDATE_MATRIX_CONTENT"
                fi
              else
                echo "ERROR: jq validation/compaction of matrix.json failed (exit code $JQ_EXIT_CODE) or produced empty output."
                echo "ERROR: Content of matrix.json was (first 500 chars):"
                head -c 500 matrix.json
                echo "ERROR: Defaulting output to '[]'."
                # OUTPUT_VALUE_FOR_GITHUB remains "[]"
              fi
            else
              echo "WARNING: matrix.json exists but is empty. Defaulting output to '[]'."
              # OUTPUT_VALUE_FOR_GITHUB remains "[]"
            fi
          else
            echo "WARNING: matrix.json does NOT exist. Defaulting output to '[]'."
            # OUTPUT_VALUE_FOR_GITHUB remains "[]"
          fi
          
          echo "FINAL_OUTPUT_DECISION: The value to be set for 'matrix' output is (first 200 chars): $(echo "$OUTPUT_VALUE_FOR_GITHUB" | head -c 200)"
          echo "FINAL_OUTPUT_DECISION: Length of value: ${#OUTPUT_VALUE_FOR_GITHUB}"
          echo "matrix=$OUTPUT_VALUE_FOR_GITHUB" >> "$GITHUB_OUTPUT"
          echo "INFO: Attempted to write to GITHUB_OUTPUT. Check action summary for actual output set."
          # set +x # if set -x was uncommented
          
      - name: Upload chunks and resolvers
        # Only upload if the matrix implies work to be done.
        if: steps.set_matrix_output.outputs.matrix != '[]'
        uses: actions/upload-artifact@v4
        with:
          name: puredns-chunks
          path: |
            chunks
            resolvers.txt # Ensure resolvers.txt exists in the repo or is created before this
          retention-days: 1         

  resolve:
    name: Split & resolve subdomains
    needs: prepare_matrix
    runs-on: ubuntu-latest
    env:
      TERM: xterm       
    #container:
     # image: ghcr.io/pcoder7/spider-puredns-actions:latest
      #credentials:
       # username: ${{ github.actor }}
        #password: ${{ secrets.GHCR_TOKEN }}
    strategy:
      max-parallel: 20    
      matrix:
        pair: ${{ fromJson(needs.prepare_matrix.outputs.matrix) }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Download chunks + resolvers
        uses: actions/download-artifact@v4
        with:
          name: puredns-chunks
          
      - name: Download resolvers.txt + resolvers-trusted
        run: |
          wget -q -O spider-resolvers.txt https://raw.githubusercontent.com/rix4uni/resolvers/refs/heads/main/resolvers.txt
          echo "spider-resolvers.txt downloaded "
          echo " ------------------------------- "
          echo " Now downloading spider-resolvers-trusted.txt "
          wget -q -O spider-resolvers-trusted.txt https://raw.githubusercontent.com/and0x00/resolvers.txt/refs/heads/main/resolvers.txt
      
      - name: Install pre‑reqs
        run: | 
          sudo apt-get update && sudo apt-get install -y jq curl

      - name: Install sanicdns
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # make sure the script is executable
          chmod +x scripts/install-sanicdns.sh
          # run the installer
          scripts/install-sanicdns.sh
     
      - name: Install ethtool & shrink NIC queues
        run: |
          sudo apt-get update -qq
          for i in {1..3}; do
            sudo DEBIAN_FRONTEND=noninteractive apt-get install -y -qq jq ethtool && break
            echo "apt install failed, retrying in 10s…" >&2
            sleep 10
          done
      
      - name: Resize NIC RSS queues
        run: |
          IFACE=$(ip route show default 2>/dev/null | awk '/default/ {print $5}' | head -n1)
          if [ -n "$IFACE" ]; then
            echo "🔧 Resizing RSS queues on $IFACE to 3..."
            sudo ethtool -L "$IFACE" combined 3 || true
          else
            echo "⚠️  No default interface detected; skipping RSS resize."
          fi
      
      - name: Allocate hugepages (1 GB)
        run: |
          # best-effort; if dpdk-hugepages.py isn't on PATH this will fail harmlessly
          sudo dpdk-hugepages.py --setup 2G || true
      
      - name: Verify installation
        run: |
          which sanicdns        
  
      - name: Resolve chunk via PureDNS
        id: run_resolve
        shell: bash
        run: |
          export TERM=xterm  
          DOMAIN=${{ matrix.pair.domain }}
          CHUNK=${{ matrix.pair.chunk }}
          OUT_DIR="results/$DOMAIN"
          mkdir -p "$OUT_DIR"
          CHUNK_BASENAME=$(basename "$CHUNK")
          OUT_FILE="$OUT_DIR/resolved_${CHUNK_BASENAME}"
          #WILDCARD_FILE=""$OUT_DIR/wildcard_${CHUNK_BASENAME}""
          LOG_FILE=""$OUT_DIR/wildcard_${CHUNK_BASENAME}""
          echo "Resolving chunk '$CHUNK' for domain '$DOMAIN'..."
          #puredns resolve "$CHUNK" -r resolvers.txt --resolvers-trusted resolvers-trusted.txt -q --write "$OUT_FILE" --write-wildcards "$WILDCARD_FILE" --wildcard-batch 100000 --wildcard-tests 500
          sudo sanicdns \
            -i "$CHUNK" \
            -r 5000 \
            -c 20000 \
            -l $LOG_FILE \
            --resolvers spider-resolvers-trusted.txt \
            -o "$OUT_FILE" \
            -w 4 \
            --num-retries 3 \
            --timeout 30000 

          # To suppress output use > /dev/null 2>&1  
          # Export basename for artifact naming
          echo " ----- Count Resolved Domains----- "
          cat "$OUT_FILE" | jq -r 'select(.data.answers | any(.type == "A")) |  .name | rtrimstr(".")' | sort -u |wc -l
          echo "CHUNK_BASENAME=$CHUNK_BASENAME" >> $GITHUB_ENV 
          
          
      - name: Upload resolved results
        uses: actions/upload-artifact@v4
        with:
          name: resolved_${{ matrix.pair.domain }}_${{ env.CHUNK_BASENAME }}
          path: results/${{ matrix.pair.domain }}/resolved_${{ env.CHUNK_BASENAME }}
          retention-days: 1
